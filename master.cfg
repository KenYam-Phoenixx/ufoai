# -*- python -*-
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: nil -*-
# ex: set syntax=python:

import os
import ufoaisecret
import ufoai
git_repo="git://ufoai.git.sourceforge.net/gitroot/ufoai/ufoai"
git_path="/home/users/mattn/buildbot/ufoai"
package_path="/home/users/mattn/public_html/ufoai/snapshots"
src_master_dir="src-master"
src_master_checkout_dir="src"
src_path="/home/users/mattn/localslave/"+src_master_dir+"/"+src_master_checkout_dir

c = BuildmasterConfig = {}

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
localslave = BuildSlave("localslave", ufoaisecret.pwd_localslave, max_builds=2)
c['slaves'] = [localslave]
c['slavePortnum'] = "tcp:9989:interface=127.0.0.1"

####### LOCK

from buildbot.locks import MasterLock, SlaveLock
lock_src = MasterLock("source")
lock_bot = SlaveLock("slave", maxCount = 1)

####### CHANGESOURCES

from gitpoller import GitPoller
repo_poller = GitPoller(
                repourl=git_repo,
                pollinterval=60, # seconds
                workdir=git_path,
)
c['change_source'] = [ repo_poller ]

####### SCHEDULERS

from buildbot.scheduler import Scheduler, Nightly, Triggerable, Periodic

s_master = Scheduler(name="fetch-master",
    branch=None,
    treeStableTimer=5,
    builderNames=["fetch-master"])

s_build_master = Triggerable(name="master",
    builderNames=["linux", "linux-uforadiant", "mingw32", "mingw32-uforadiant", "unittests"])

c['schedulers'] = [
    s_master,
    s_build_master
]

####### BUILDERS

from buildbot.process import factory
from buildbot.steps.source import Git
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Test
from buildbot.steps.python_twisted import Trial

c['builders'] = []

####### Repository update

f = factory.BuildFactory()
f.useProgress = False
f.addStep(Git(mode="update",
    repourl = git_repo,
    workdir = src_master_checkout_dir,
    branch = "master",
    shallow = True,
    timeout = 40000 * 600))
f.addStep(Trigger(schedulerNames = [ "master" ],
    updateSourceStamp = True,
    waitForFinish = True))

c['builders'].append( {
    'name': "fetch-master",
    'slavename': "localslave",
    'builddir': src_master_dir,
    'category': "fetch",
    'factory': f,
    'locks': [ lock_src.access("exclusive") ]
})

####### Unittest Build


test_suites = ["GenericTests", "ParserTests", "UITests", "CampaignTests", "RoutingTests", "InventoryTests"]
#test_suites.append("RandomMapAssemblyTests")

####### Unittest Build

build_env_unittest = {
    "LC_ALL": "C",
    "CC": "gcc"
}

f = factory.BuildFactory()
compile_steps = ["clean", "ufo2map", "testall"]
f.addStep(Configure(command=["./configure"], env=build_env_unittest, workdir=src_path))
for step in compile_steps:
    f.addStep(Compile(command=["make", "Q=", step], env=build_env_unittest, workdir=src_path, name="make", description=step))
f.addStep(ShellCommand(command=["./ufo2map", "-quant", "6", "maps/fueldump"], env=build_env_unittest, workdir=src_path, description="compile fueldump"))
#for suite in test_suites:
#    f.addStep(ufoai.UFOAICUnitTest(suite, workdir=src_path))
#f.addStep(ufoai.UFOAICUnitOtherTests(test_suites, workdir=src_path))
for suite in test_suites:
    f.addStep(ShellCommand(command=["./testall", "--only-" + suite], env=build_env_unittest, workdir=src_path, name="test", description=suite))

c['builders'].append( {
      'name': "unittests",
      'slavename': "localslave",
      'builddir': "master-unittests",
      'factory': f,
      'locks': [ lock_bot.access("counting") ],
      'category': "master"
})

####### Linux Build

build_env_linux = {
    "LC_ALL": "C",
    "CC": "gcc"
}

compile_steps = ["clean", "ufo", "ufoded", "ufomodel", "ufo2map"]
f = factory.BuildFactory()
f.addStep(Configure(command=["./configure"], env=build_env_linux, workdir=src_path))
for step in compile_steps:
    f.addStep(Compile(command=["make", "Q=", step], env=build_env_linux, workdir=src_path, description=step, name=step))

c['builders'].append( {
      'name': "linux",
      'slavename': "localslave",
      'builddir': "master-linux",
      'factory': f,
      'locks': [ lock_bot.access("counting") ],
      'category': "master"
})

####### Linux Build UFORadiant

compile_steps = ["clean", "uforadiant"]
f = factory.BuildFactory()
f.addStep(Configure(command=["./configure"], env=build_env_linux, workdir=src_path))
for step in compile_steps:
    f.addStep(Compile(command=["make", "Q=", step], env=build_env_linux, workdir=src_path, description=step, name=step))

c['builders'].append( {
      'name': "linux-uforadiant",
      'slavename': "localslave",
      'builddir': "master-linux-uforadiant",
      'factory': f,
      'locks': [ lock_bot.access("counting") ],
      'category': "master"
})

####### Mingw32 Build

mingw_cross_env_root = "/home/users/mattn/mingw-cross-env"

build_env_mingw32 = {
    "LC_ALL": "C",
    "CC": "gcc",
    "PATH": "%s/usr/bin:%s/usr/i686-pc-mingw32/bin:%s" % (mingw_cross_env_root, mingw_cross_env_root, os.environ["PATH"])
}

compile_steps = ["clean", "ufo", "ufoded", "ufomodel", "ufo2map"]
f = factory.BuildFactory()
f.addStep(Configure(command=["./configure", "--target-os=mingw32"], env=build_env_mingw32, workdir=src_path))
for step in compile_steps:
    f.addStep(Compile(command=["make", "Q=", step], env=build_env_mingw32, workdir=src_path, description=step, name=step))
f.addStep(ufoai.Package(files=["ufoded.exe", "ufo.exe", "base/game.dll", "ufo2map.exe", "ufomodel.exe"], workdir=src_path, output=package_path+"/ufoai-latest-win32.zip"))

c['builders'].append( {
      'name': "mingw32",
      'slavename': "localslave",
      'builddir': "master-mingw32",
      'factory': f,
      'locks': [ lock_bot.access("counting") ],
      'category': "master"
})

####### Mingw32 Build UFORadiant

compile_steps = ["clean", "uforadiant"]
f = factory.BuildFactory()
f.addStep(Configure(command=["./configure", "--target-os=mingw32"], env=build_env_mingw32, workdir=src_path))
for step in compile_steps:
    f.addStep(Compile(command=["make", "Q=", step], env=build_env_mingw32, workdir=src_path, description=step, name=step))

c['builders'].append( {
      'name': "mingw32-uforadiant",
      'slavename': "localslave",
      'builddir': "master-mingw32-uforadiant",
      'factory': f,
      'locks': [ lock_bot.access("counting") ],
      'category': "master"
})

####### Mingw32 Build UFORadiant Installer

compile_steps = ["clean", "uforadiant"]
f = factory.BuildFactory()
f.addStep(Configure(command=["./configure", "--target-os=mingw32"], env=build_env_mingw32, workdir=src_path))
for step in compile_steps:
    f.addStep(Compile(command=["make", "Q=", step], env=build_env_mingw32, workdir=src_path, description=step, name=step))
f.addStep(ShellCommand(command=["make", "win32installer-uforadiant"], env=build_env_mingw32, workdir=src_path))
f.addStep(ShellCommand(command=["cp", "uforadiant-*-win32.exe", package_path+"/uforadiant-latest-win32.exe"]))

c['builders'].append( {
      'name': "mingw32-uforadiant-installer",
      'slavename': "localslave",
      'builddir': "master-mingw32-uforadiant-installer",
      'factory': f,
      'locks': [ lock_bot.access("counting") ],
      'category': "master"
})

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
c['status'].append(words.IRC(
    host="irc.freenode.org",
    nick="ufoai_bb",
    password= ufoaisecret.pwd_nickserv,
    channels=["#ufoai"]))

#from buildbot.status import client
#c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"


####### PROJECT IDENTITY

c['projectName'] = "UFO:Alien Invasion"
c['projectURL'] = "http://ufoai.sourceforge.net/"
c['buildbotURL'] = "http://ninex.info:8010/"
