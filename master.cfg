# -*- python -*-
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: nil -*-
# ex: set syntax=python:

import os
import ufoaisecret
git_repo="git://ufoai.git.sourceforge.net/gitroot/ufoai/ufoai"
git_path="/home/users/mattn/buildbot/ufoai"

c = BuildmasterConfig = {}

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
localslave = BuildSlave("localslave", ufoaisecret.pwd_localslave, max_builds=2)
c['slaves'] = [localslave]
c['slavePortnum'] = "tcp:9989:interface=127.0.0.1"

####### LOCK

from buildbot.locks import MasterLock, SlaveLock
lock_src = MasterLock("source")
lock_bot = SlaveLock("slave", maxCount = 1)

####### CHANGESOURCES

from gitpoller import GitPoller
repo_poller = GitPoller(
                repourl=git_repo,
                pollinterval=60, # seconds
                workdir=git_path,
)
c['change_source'] = [ repo_poller ]

####### BUILDERS

from buildbot.process import factory
from buildbot.steps.source import Git
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Test
from buildbot.steps.python_twisted import Trial

c['builders'] = []

####### Repository update

f = factory.BuildFactory()
f.addStep(Git(mode="update",
    repourl=git_repo,
    workdir="src",
    timeout=40000*600))
f.addStep(Trigger(schedulerNames = [ "master" ],
    updateSourceStamp = True,
    waitForFinish = True))

c['builders'].append( {
    'name': "fetch-master",
    'slavename': "localslave",
    'builddir': "src-master",
    'category': "fetch",
    'factory': f,
    'locks': [ lock_src.access("exclusive") ]
})

####### Unittests

from CUnitTest import CUnitTest

class UFOAICUnitTest(CUnitTest):
    def __init__(self, suite, **kwargs):
        name = suite
        name = "ufoai"  # TODO while we can't update the game code
        result = name + "-Results.xml"
        CUnitTest.__init__(self,
                command=["./testall", "--automated", "--only-" + suite, "--output-prefix=" + name],
                flunkOnFailure=True,
                cunit_result_file=result, **kwargs)
        #self.setProperty("name", suite)

class UFOAICUnitOtherTests(CUnitTest):
    def __init__(self, suites, **kwargs):
        name = "other"
        name = "ufoai"  # TODO while we can't update the game code
        result = name + "-Results.xml"
        command=["./testall", "--automated", "--output-prefix=" + name]
        for suite in suites:
            command.append("--disable-" + suite)
        CUnitTest.__init__(self,
                command=command,
                flunkOnFailure=True,
                cunit_result_file=result, **kwargs)
        #self.setProperty("name", "OtherTests")

test_suites = ["GenericTests", "ParserTests", "UITests", "CampaignTests", "RoutingTests", "InventoryTests", "RandomMapAssemblyTests"]

####### Linux Build

build_env_linux = {
    "LC_ALL": "C",
}

f = factory.BuildFactory()
f.addStep(Compile(command=["make", "distclean", "all"], env=build_env_linux))
f.addStep(ShellCommand(command=["./ufo2map", "maps/fueldump"], env=build_env_linux))
for suite in test_suites:
    f.addStep(UFOAICUnitTest(suite))
f.addStep(UFOAICUnitOtherTests(test_suites))

c['builders'].append( {
      'name': "linux",
      'slavename': "localslave",
      'builddir': "master-linux",
      'factory': f
})

####### Mingw32 Build

mingw_cross_env_root = "/home/users/mattn/mingw-cross-env"

build_env_mingw32 = {
    "LC_ALL": "C",
    "PATH": "%s/bin:%s/i686-pc-mingw32/bin:%s" % (mingw_cross_env_root, mingw_cross_env_root, os.environ["PATH"])
}

f = factory.BuildFactory()
f.addStep(Configure(command=["./configure", "--target-os=mingw32"], env=build_env_mingw32))
f.addStep(Compile(command=["make", "clean", "all"], env=build_env_mingw32))

c['builders'].append( {
      'name': "mingw32",
      'slavename': "localslave",
      'builddir': "master-mingw32",
      'factory': f
})

####### SCHEDULERS

from buildbot.scheduler import Scheduler, Nightly, Triggerable
c['schedulers'] = []

s_master = Scheduler(name="fetch-master",
    branch=None,
    treeStableTimer=5,
    builderNames=["fetch-master"])

s_linux = Triggerable(name="linux",
    builderNames=["linux"])

s_mingw32 = Triggerable(name="mingw32",
    builderNames=["mingw32"])

c['schedulers'] = [
    s_master,
    s_linux,
    s_mingw32
]


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
c['status'].append(words.IRC(
    host="irc.freenode.org",
    nick="ufoai_bb",
    password= ufoaisecret.pwd_nickserv,
    channels=["#ufoai"]))

#from buildbot.status import client
#c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"


####### PROJECT IDENTITY

c['projectName'] = "UFO:Alien Invasion"
c['projectURL'] = "http://ufoai.sourceforge.net/"
c['buildbotURL'] = "http://ninex.info:8010/"
