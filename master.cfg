# -*- python -*-
# ex: set syntax=python:

import ufoaisecret

c = BuildmasterConfig = {}

####### DB URL

c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
localslave = BuildSlave("localslave", ufoaisecret.pwd_localslave, max_builds=2)
c['slaves'] = [localslave]
c['slavePortnum'] = 9989

####### CHANGESOURCES

# via hook?
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

from buildbot.changes.svnpoller import SVNPoller
svn_poller = SVNPoller(
                svnurl="http://ufoai.svn.sourceforge.net/svnroot/ufoai/ufoai/trunk",
                pollinterval=60, # seconds
                histmax=20,
                svnbin='/usr/bin/svn',
)
c['change_source'] = [ svn_poller ]

####### SCHEDULERS

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="all", branch=None,
                                 treeStableTimer=2*60,
                                 builderNames=["ufoded-trunk", "unittests-trunk"]))


####### BUILDERS

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Test
from buildbot.steps.python_twisted import Trial

####### Dedicated Server

f_dedicatedserver = factory.BuildFactory()
f_dedicatedserver.addStep(SVN(mode="update", baseURL="http://ufoai.svn.sourceforge.net/svnroot/ufoai/ufoai/", defaultBranch="trunk", retry=(10, 15)))
f_dedicatedserver.addStep(Configure(command=["./configure", "--disable-client", "--disable-tests", "--disable-uforadiant", "--disable-ufomodel", "--disable-ufo2map"]))
f_dedicatedserver.addStep(Compile(command=["nice", "-n", "17", "make", "clean", "all"]))

b_dedicatedserver = {'name': "ufoded-trunk",
      'slavename': "localslave",
      'builddir': "ufoded",
      'factory': f_dedicatedserver,
      }

####### Windows Build

#f_win32 = factory.BuildFactory()
#f_win32.addStep(SVN(mode="update", baseURL="http://ufoai.svn.sourceforge.net/svnroot/ufoai/ufoai/", defaultBranch="trunk", retry=(10, 15)))
#f_win32.addStep(Configure(command=["./configure", "--host=i686-mingw32", "--disable-uforadiant"]))
#f_win32.addStep(Compile(command=["nice", "-n", "17", "make", "clean", "all"]))

#b_win32 = {'name': "win32-trunk",
#      'slavename': "localslave",
#      'builddir': "ufowin32",
#      'factory': f_win32,
#      }

####### Unittests

f_unittests = factory.BuildFactory()
f_unittests.addStep(SVN(mode="update", baseURL="http://ufoai.svn.sourceforge.net/svnroot/ufoai/ufoai/", defaultBranch="trunk", retry=(10, 15)))
f_unittests.addStep(Configure(command=["./configure", "--disable-uforadiant"]))
f_unittests.addStep(Compile(command=["nice", "-n", "17", "make", "clean", "all"]))
f_unittests.addStep(ShellCommand(command=["./ufo2map", "maps/fueldump"]))
f_unittests.addStep(Test(command=["nice", "-n", "17", "./testall", "--automated"]))
f_unittests.addStep(Test(command=["./contrib/buildbot/generate_test_output.py"]))

b_unittests = {'name': "unittests-trunk",
      'slavename': "localslave",
      'builddir': "ufounittests",
      'factory': f_unittests,
      }


#c['builders'] = [b_dedicatedserver, b_win32, b_unittests]
c['builders'] = [b_dedicatedserver, b_unittests]


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = False,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#

from buildbot.status import words
c['status'].append(words.IRC(
	host="irc.freenode.org",
	nick="ufoai_bb",
	password= ufoaisecret.pwd_nickserv,
	channels=["#ufoai"]))

#from buildbot.status import client
#c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"


####### PROJECT IDENTITY

c['projectName'] = "UFO:Alien Invasion"
c['projectURL'] = "http://ufoai.sourceforge.net/"
c['buildbotURL'] = "http://ninex.info:8010/"
