^AC_INIT(src/server/sv_main.c)

# check build/host/target systems
# (build  = system we're building on,
#  host   = system we're building for,
#  target = system the program we're building will build for)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AC_MSG_CHECKING(system)
case "$host_os" in
	linux*)
		AC_MSG_RESULT(UNIX (GNU/Linux))
		;;
	mingw32* )
		AC_MSG_RESULT(Win32 (mingw32))
		;;
	cygwin* )
		AC_MSG_RESULT(Win32 (cygwin))
		;;
	openbsd* )
		AC_MSG_RESULT(UNIX (OpenBSD))
		;;
	solaris* )
		AC_MSG_RESULT(UNIX (Solaris))
		;;
	darwin*)
		AC_MSG_RESULT(Mac OS X)
		;;
	*)
		AC_MSG_RESULT(not sure... guessing a unix variant)
		;;
esac

AC_ARG_WITH(sdl_config,
	[AC_HELP_STRING([--with-sdl-config=FILE], [using the given sdl-config @<:@default=sdl-config@:>@])],
	[], [with_sdl_config=sdl-config])

AC_ARG_WITH(shaders,
	[AS_HELP_STRING([--with-shaders], [with OpenGL shader support @<:@default=check@:>@])],
	[], [with_shaders=check])

AC_ARG_WITH(curses,
	[AS_HELP_STRING([--with-curses], [compile with curses console support @<:@default=check@:>@])],
	[], [with_curses=check])

AC_ARG_WITH(opengl_framework,
	[AS_HELP_STRING([--with-opengl-framework], [compile with given opengl framework @<:@default=/System/Library/Frameworks/OpenGL.framework@:>@])],
	[], [with_opengl_framework=/System/Library/Frameworks/OpenGL.framework])

AC_ARG_ENABLE(dedicated,
	[AS_HELP_STRING([--disable-dedicated], [build dedicated server @<:@default=enabled@:>@])],
	[], [enable_dedicated=yes])

AC_ARG_ENABLE(client,
	[AS_HELP_STRING([--disable-client], [build client @<:@default=enabled@:>@])],
	[], [enable_client=yes])

AC_ARG_ENABLE(ufo2map,
	[AS_HELP_STRING([--disable-ufo2map], [build ufo2map @<:@default=enabled@:>@])],
	[], [enable_ufo2map=yes])

AC_ARG_ENABLE(release,
	[AS_HELP_STRING([--enable-release], [build release, if disabled then build debug @<:@default=disabled@:>@])],
	[], [enable_release=no])

AC_ARG_ENABLE(paranoid,
	[AS_HELP_STRING([--enable-paranoid], [enable PARANOID checks @<:@default=disabled@:>@])],
	[], [enable_paranoid=no])

AC_ARG_ENABLE(profiling,
	[AS_HELP_STRING([--enable-profiling], [build with profiling for gprof @<:@default=disabled@:>@])],
	[], [enable_profiling=no])

AC_ARG_ENABLE(mmx,
	[AS_HELP_STRING([--enable-mmx], [use MMX optimisations @<:@default=disabled@:>@])],
	[], [enable_mmx=no])

#---------------------------------------------------------------------------------------------
# CHECK SED
#---------------------------------------------------------------------------------------------

AC_CHECK_PROG(HAVE_SED,sed,yes)
if test $HAVE_SED != "yes"
then
	AC_MSG_ERROR([You must have sed installed])
fi

#---------------------------------------------------------------------------------------------
# CHECK ECHO
#---------------------------------------------------------------------------------------------

AC_CHECK_PROG(HAVE_ECHO,echo,yes)
if test $HAVE_ECHO != "yes"
then
	AC_MSG_ERROR([You must have a functioning echo installed])
fi

#---------------------------------------------------------------------------------------------
# CHECK TARGET_OS
#---------------------------------------------------------------------------------------------
AC_MSG_CHECKING([target OS])
if test `echo $target_os | sed "s/\(linux\).*/\1/"` = "linux"
then
	AC_SUBST([TARGET_OS],[linux-gnu])
elif test `echo $target_os | sed "s/\(freebsd\).*/\1/"` = "freebsd"
then
	AC_SUBST([TARGET_OS],[freebsd])
elif test `echo $target_os | sed "s/\(netbsd\).*/\1/"` = "netbsd"
then
	AC_SUBST([TARGET_OS],[netbsd])
elif test `echo $target_os | sed "s/\(mingw32\).*/\1/"` = "mingw32"
then
	AC_SUBST([TARGET_OS],[mingw32])
elif test `echo $target_os | sed "s/\(solaris\).*/\1/"` = "solaris"
then
	AC_SUBST([TARGET_OS],[solaris])
elif test `echo $target_os | sed "s/\(darwin\).*/\1/"` = "darwin"
then
	AC_SUBST([TARGET_OS],[darwin])
	CFLAGS="$CFLAGS -F$with_opengl_framework"
	LDFLAGS="$LDFLAGS -framework IOKit -framework Foundation -framework OpenGL"
	# fix this darn SDL stuff....
	if test -d /Library/Frameworks/SDL.framework
	then
		sdl_mac_cflags="$sdl_mac_cflags -I/Library/Frameworks/SDL.framework/Headers"
		sdl_mac_ldflags="$sdl_mac_ldflags -framework SDL"
	else
		# should test for different framework locations, like /System/Library/Frameworks
		# and ~/Library/Frameworks..... later....
		AC_MSG_ERROR([Could not find SDL Framework at /Library/Frameworks.])
	fi
	if test -d /Library/Frameworks/SDL_mixer.framework
	then
		sdl_mac_cflags="$sdl_mac_cflags -I/Library/Frameworks/SDL_mixer.framework/Headers"
		sdl_mac_ldflags="$sdl_mac_ldflags -framework SDL_mixer"
	else
		AC_MSG_ERROR([Could not find SDL_mixer Framework at /Library/Frameworks.])
	fi
	if test -d /Library/Frameworks/SDL_ttf.framework
	then
		sdl_mac_cflags="$sdl_mac_cflags -I/Library/Frameworks/SDL_ttf.framework/Headers"
		sdl_mac_ldflags="$sdl_mac_ldflags -framework SDL_ttf"
	else
		AC_MSG_ERROR([Could not find SDL_ttf Framework at /Library/Frameworks.])
	fi
	### most mac users will have their additional libs and headers under /opt/local,
	### check for that, and if present, add to CFLAGS/LDFLAGS (really convenient!)
	if test -d /opt/local
	then
		CFLAGS="$CFLAGS -I/opt/local/include"
		LDFLAGS="$LDFLAGS -L/opt/local/lib"
	fi
else
	AC_MSG_ERROR([The target operating system '$target_os' is unknown, please contact the developers])
fi
AC_MSG_RESULT($TARGET_OS)

#---------------------------------------------------------------------------------------------
# CHECK TARGET_CPU
#---------------------------------------------------------------------------------------------

AC_MSG_CHECKING([target CPU])
if test "$target_cpu" = "x86_64"
then
	AC_SUBST([TARGET_CPU],[x86_64])
elif test "$target_cpu" = "i386" ||
	 test "$target_cpu" = "i486" ||
	 test "$target_cpu" = "i586" ||
	 test "$target_cpu" = "i686"
then
	AC_SUBST([TARGET_CPU],[i386])
elif test "$target_cpu" = "powerpc"
then
	AC_SUBST([TARGET_CPU],[powerpc])
elif test "$target_cpu" = "powerpc64"
then
	AC_SUBST([TARGET_CPU],[powerpc64])
else
	AC_MSG_WARN([The target CPU '$target_cpu' is unknown, default options will be applied])
	AC_MSG_WARN([Please contact the developers for assistance])
	AC_SUBST([TARGET_CPU],[unknown])
fi
AC_MSG_RESULT($TARGET_CPU)

#---------------------------------------------------------------------------------------------
# CHECK CC
#---------------------------------------------------------------------------------------------

AC_PROG_CC

# ---------------------------------------------------------------------
# CHECK SIZES OF INTEGER TYPES
# ---------------------------------------------------------------------
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(int*)

#---------------------------------------------------------------------------------------------
# CHECK RM
#---------------------------------------------------------------------------------------------

AC_CHECK_PROG(HAVE_RM,rm,yes)
if test $HAVE_RM != "yes"
then
	AC_MSG_ERROR([You must have the rm program installed])
fi

#---------------------------------------------------------------------------------------------
# CHECK MKDIR
#---------------------------------------------------------------------------------------------

AC_CHECK_PROG(HAVE_MKDIR,mkdir,yes)
if test $HAVE_MKDIR != "yes"
then
	AC_MSG_ERROR([You must have the mkdir program installed])
fi

#---------------------------------------------------------------------------------------------
# CHECK windres
#---------------------------------------------------------------------------------------------

WINDRES=""
if test $TARGET_OS = "mingw32"
then
	WINDRES=windres
	AC_CHECK_PROG(HAVE_WINDRES,$WINDRES,yes)
	if test "$HAVE_WINDRES" != "yes"
	then
		WINDRES="$target_cpu-$target_os-windres"
		AC_CHECK_PROG(HAVE_WINDRES,$WINDRES,yes)
		if test "$HAVE_WINDRES" != "yes"
		then
			WINDRES=""
			AC_MSG_ERROR([You must have the windres program installed])
		fi
	fi
fi
AC_SUBST([WINDRES],$WINDRES)

#---------------------------------------------------------------------------------------------
# CHECK winsock2
#---------------------------------------------------------------------------------------------

if test $TARGET_OS = "mingw32"
then
	AC_MSG_RESULT([Mingw32 - Trying to use Winsock2 (WS2_32)])
	AC_CHECK_HEADERS([winsock2.h])
	AC_CHECK_LIB(ws2_32, main, , AC_MSG_ERROR([Winsock2 is needed for a Windows mingw build.]))
fi

#---------------------------------------------------------------------------------------------
# CHECK NETWORKING
#---------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------------
# CHECK IPV6 FUNCTION
#---------------------------------------------------------------------------------------------

AC_CHECK_FUNCS(getaddrinfo)
AC_CHECK_FUNCS(freeaddrinfo)

#---------------------------------------------------------------------------------------------
# CHECK AI_NUMERICSERV
#---------------------------------------------------------------------------------------------

AC_CHECK_DECL(AI_NUMERICSERV,
	[AC_DEFINE(HAVE_AI_NUMERICSERV,1,[AI_NUMERICSERV found in netdb.h])],
	[AC_DEFINE(HAVE_AI_NUMERICSERV,0,[AI_NUMERICSERV not found in netdb.h])],
	[#include <netdb.h>])

#---------------------------------------------------------------------------------------------
# Check for stdint.h
#---------------------------------------------------------------------------------------------

AC_CHECK_HEADERS([stdint.h])
if test "$ac_cv_header_stdint_h" != "yes"
then
	AC_MSG_ERROR([Could not find stdint.h!])
fi

#---------------------------------------------------------------------------------------------
# Check how to open a dynamic library ...
#---------------------------------------------------------------------------------------------

LIBS=
if test "$TARGET_OS" != "mingw32"
then
	AC_SEARCH_LIBS([dlopen],[dl])
	if test "$ac_cv_search_dlopen" = "no"
	then
		AC_MSG_ERROR([could not decide how to open a dynamic link library!])
	fi
fi
CLIENT_LIBS="$CLIENT_LIBS $LIBS"
SERVER_LIBS="$SERVER_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check how to do maths
#---------------------------------------------------------------------------------------------

LIBS=
AC_SEARCH_LIBS([cos],[m])
if test "$ac_cv_search_cos" = "no"
then
	AC_MSG_ERROR([could not determine how to link to maths library])
fi
CLIENT_LIBS="$CLIENT_LIBS $LIBS"
SERVER_LIBS="$SERVER_LIBS $LIBS"
GAME_LIBS="$GAME_LIBS $LIBS"
TOOLS_LIBS="$TOOLS_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check how to do stricmp
#---------------------------------------------------------------------------------------------

LIBS=
AC_SEARCH_LIBS([stricmp],[])
if test "$ac_cv_search_stricmp" = "no"
then
	AC_SEARCH_LIBS([strcasecmp], [])
	if test "$ac_cv_search_strcasecmp" = "no"
	then
		AC_MSG_ERROR([could find neither stricmp nor strcasecmp!])
	else
		AC_DEFINE([stricmp],[strcasecmp],[stricmp function to use])
	fi
fi
CLIENT_LIBS="$CLIENT_LIBS $LIBS"
SERVER_LIBS="$SERVER_LIBS $LIBS"
GAME_LIBS="$GAME_LIBS $LIBS"
TOOLS_LIBS="$TOOLS_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for zlib
#---------------------------------------------------------------------------------------------

LIBS=
AC_CHECK_HEADERS([zlib.h])
if test "$ac_cv_header_zlib_h" != "yes"
then
	AC_MSG_ERROR([Could not find zlib.h!])
fi
AC_CHECK_LIB(z, compress, LIBS="-lz", AC_MSG_ERROR([You must have libz!!!]))
CLIENT_LIBS="$CLIENT_LIBS $LIBS"
SERVER_LIBS="$SERVER_LIBS $LIBS"
TOOLS_LIBS="$TOOLS_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for curl
#---------------------------------------------------------------------------------------------
LIBS=
AC_CHECK_HEADERS([curl/curl.h])
if test "$ac_cv_header_curl_curl_h" != "yes"
then
	AC_MSG_ERROR([Could not find curl/curl.h!])
fi
AC_CHECK_LIB(curl, curl_easy_init, LIBS="-lcurl", AC_MSG_ERROR([You must have libcurl!!!]))
CLIENT_LIBS="$CLIENT_LIBS $LIBS"
SERVER_LIBS="$SERVER_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check JPEG
#---------------------------------------------------------------------------------------------
AC_CHECK_HEADERS([jpeglib.h])
if test "$ac_cv_header_jpeglib_h" = "no"
then
	AC_MSG_ERROR([You must have the JPEG development headers])
fi
LIBS=
AC_CHECK_LIB(jpeg, jpeg_CreateDecompress, LIBS="-ljpeg", AC_MSG_ERROR([You must have libjpeg!!!]))
TOOLS_LIBS="$TOOLS_LIBS $LIBS"
CLIENT_LIBS="$CLIENT_LIBS $LIBS"

if test "$enable_client" = "yes"
then
	CLIENT_CFLAGS=
	LIBS=

	#---------------------------------------------------------------------------------------------
	# Check for gettext
	#---------------------------------------------------------------------------------------------
	AC_CHECK_HEADERS([libintl.h])
	if test "$ac_cv_header_libintl_h" != "yes"
	then
		AC_MSG_ERROR([Could not find libintl.h!])
	fi

	AC_SEARCH_LIBS([gettext],[intl])
	if test "$ac_cv_search_gettext" = "no"
	then
		AC_MSG_ERROR([Could not find internationalization library with gettext in it])
	fi
	#AC_CHECK_LIB(intl, gettext, [], AC_MSG_ERROR([You must have libintl!!!]))

	#---------------------------------------------------------------------------------------------
	# Check SDL
	#---------------------------------------------------------------------------------------------
	sdl_config=$with_sdl_config

	OLD_CPPFLAGS=$CPPFLAGS
	OLD_CFLAGS=$CFLAGS
	OLD_LDFLAGS=$LDFLAGS

	if test $TARGET_OS != "darwin"
	then
		AC_CHECK_PROG(HAVE_SDL_CONFIG,$sdl_config,yes)
		if test "$ac_cv_prog_HAVE_SDL_CONFIG" = "yes"
		then
			CPPFLAGS=`$sdl_config --cflags`
			LDFLAGS=`$sdl_config --libs`
			AC_SUBST([SDL_CFLAGS],$CPPFLAGS)
			AC_SUBST([SDL_LIBS],$LDFLAGS)
		else
			AC_MSG_WARN([cannot find $sdl_config might fail to find SDL!])
		fi
	else
		# mac is special...again
		CFLAGS="$CFLAGS $sdl_mac_cflags"
		LDFLAGS="$LDFLAGS $sdl_mac_ldflags"
		SDL_CFLAGS="$sdl_mac_cflags"
		SDL_LIBS="$sdl_mac_ldflags"
	fi

	#---------------------------------------------------------------------------------------------
	# Check for SDL headers and libraries
	#---------------------------------------------------------------------------------------------
	AC_CHECK_HEADERS([SDL.h])
	if test "$ac_cv_header_SDL_h" != "yes"
	then
		AC_MSG_ERROR([You must have the SDL development headers])
	fi

	#---------------------------------------------------------------------------------------------
	# Check for SDL mixer headers and libraries
	#---------------------------------------------------------------------------------------------
	# multiple main functions error for SDL_mixer and SDL_ttf otherwise
	# problem might be that -L<SDL_dir> might be missing then
	# (no issue at mac)
	if test $TARGET_OS != "darwin"
	then
		LDFLAGS=$OLD_LDFLAGS
	fi

	AC_CHECK_HEADERS([SDL_mixer.h])
	if test "$ac_cv_header_SDL_mixer_h" != "yes"
	then
		AC_MSG_ERROR([You must have the SDL_mixer development headers])
	fi
	AC_SEARCH_LIBS([Mix_OpenAudio],[SDL_mixer])
	if test "$ac_cv_search_Mix_OpenAudio" = "no"
	then
		AC_MSG_ERROR([You must have the SDL_mixer development libraries])
	fi
	#---------------------------------------------------------------------------------------------
	# Check for SDL_ttf
	#---------------------------------------------------------------------------------------------

	AC_CHECK_HEADERS([SDL_ttf.h])
	if test "$ac_cv_header_SDL_ttf_h" != "yes"
	then
		AC_MSG_ERROR([You must have the SDL_ttf development headers])
	fi
	AC_SEARCH_LIBS([TTF_Init],[SDL_ttf])
	if test "$ac_cv_search_TTF_Init" = "no"
	then
		AC_MSG_ERROR([You must have the SDL_ttf development libraries])
	fi

	CPPFLAGS=$OLD_CPPFLAGS
	CFLAGS=$OLD_CFLAGS
	LDFLAGS=$OLD_LDFLAGS

	#---------------------------------------------------------------------------------------------
	# Check PNG
	#---------------------------------------------------------------------------------------------
	AC_CHECK_HEADERS([png.h])
	if test "$ac_cv_header_png_h" = "no"
	then
		AC_MSG_ERROR([You must have the PNG development headers])
	fi
	AC_CHECK_LIB(png, png_create_info_struct, [], AC_MSG_ERROR([You must have libpng!!!]))

	#---------------------------------------------------------------------------------------------
	# Check for opengl headers
	#---------------------------------------------------------------------------------------------
	AC_CHECK_HEADERS([GL/gl.h GL/glu.h])
	if test "$ac_cv_header_GL_gl_h" != "yes" || \
		test "$ac_cv_header_GL_glu_h" != "yes"
	then
		AC_CHECK_HEADERS([OpenGL/gl.h OpenGL/glu.h])
		if test "$ac_cv_header_OpenGL_gl_h" != "yes" || \
			test "$ac_cv_header_OpenGL_glu_h" != "yes"
		then
			AC_MSG_ERROR([Could not find OpenGL development headers!])
		else
			AC_DEFINE([GL_H_WITHOUT_GL_DIR],[1],[OpenGL header path])
		fi
	fi

	#---------------------------------------------------------------------------------------------
	# Check for shaders
	#---------------------------------------------------------------------------------------------
	if test "$with_shaders" = "yes"
	then
		AC_SUBST([HAVE_SHADERS],1)
		AC_MSG_NOTICE([With shader support])
	else
		AC_MSG_NOTICE([Without shader support])
	fi

	#---------------------------------------------------------------------------------------------
	# Set the client clags and libs - the rest are shared libs
	#---------------------------------------------------------------------------------------------
	CLIENT_LIBS="$CLIENT_LIBS $LIBS"
	CLIENT_CFLAGS="$CFLAGS"

# end of client only checks
fi

#---------------------------------------------------------------------------------------------
# Check for curses
#---------------------------------------------------------------------------------------------

LIBS=
if test "$with_curses" = "check" || test "$with_curses" = "yes"
then
	AC_SEARCH_LIBS([newwin], [curses])
	if test "$ac_cv_search_newwin" != "no"
	then
		AC_SUBST([HAVE_CURSES],1)
		AC_DEFINE([HAVE_CURSES],[1],[Have curses library])
	elif test "$with_curses" = "yes"
	then
		AC_MSG_ERROR([--with-curses specified but could not find newwin])
	else
		AC_SUBST([HAVE_CURSES],0)
		AC_MSG_NOTICE([Without curses])
	fi
else
	AC_MSG_NOTICE([Without curses])
fi
SERVER_LIBS="$SERVER_LIBS $LIBS"

#---------------------------------------------------------------------------------------------
# Check for client
#---------------------------------------------------------------------------------------------

AC_SUBST([BUILD_CLIENT],0)
if test "$enable_client" = "yes"
then
	AC_MSG_NOTICE([Enabling client])
	AC_SUBST([BUILD_CLIENT],1)
fi

#---------------------------------------------------------------------------------------------
# Check for dedicated
#---------------------------------------------------------------------------------------------

AC_SUBST([BUILD_DEDICATED],0)
if test "$enable_dedicated" = "yes"
then
	AC_MSG_NOTICE([Enabling dedicated server])
	AC_SUBST([BUILD_DEDICATED],1)
fi

#---------------------------------------------------------------------------------------------
# Check for ufo2map
#---------------------------------------------------------------------------------------------

AC_SUBST([BUILD_UFO2MAP],0)
if test "$enable_ufo2map" = "yes"
then
	AC_MSG_NOTICE([Enabling ufo2map])
	AC_SUBST([BUILD_UFO2MAP],1)
fi

#---------------------------------------------------------------------------------------------
# Check for debug
#---------------------------------------------------------------------------------------------

if test "$enable_release" = "no"
then
	AC_MSG_NOTICE([Enabling debug build])
	AC_SUBST([BUILD_DEBUG],1)
else
	AC_MSG_NOTICE([Enabling release build])
	AC_SUBST([BUILD_DEBUG],0)
fi

#---------------------------------------------------------------------------------------------
# Check for PARANOID
#---------------------------------------------------------------------------------------------

if test "$enable_paranoid" = "yes"
then
	AC_SUBST([PARANOID],1)
	AC_MSG_NOTICE([Enabling PARANOID])
fi

#---------------------------------------------------------------------------------------------
# Check for PROFILING
#---------------------------------------------------------------------------------------------

if test "$enable_profiling" = "yes"
then
	AC_SUBST([PROFILING],1)
	AC_MSG_NOTICE([Enabling profiling])
else
	AC_SUBST([PROFILING],0)
fi

# ---------------------------------------------------------------------
# Architecture dependent optimisations
# ---------------------------------------------------------------------

if test "$enable_mmx" = "yes"
then
	AC_SUBST([MMX],1)
	AC_MSG_NOTICE([Enabling MMX])
else
	AC_SUBST([MMX],0)
fi

#---------------------------------------------------------------------------------------------

AC_SUBST([EXE_EXT],"$ac_exe_ext")

AC_SUBST([CLIENT_LIBS],"$CLIENT_LIBS")
AC_SUBST([CLIENT_CFLAGS],"$CLIENT_CFLAGS")
AC_SUBST([SERVER_LIBS],"$SERVER_LIBS")
AC_SUBST([GAME_LIBS],"$GAME_LIBS")
AC_SUBST([TOOLS_LIBS],"$TOOLS_LIBS")
AC_SUBST([MASTER_LIBS],"$MASTER_LIBS")

#AC_MSG_NOTICE(Compiler flags: $CFLAGS)
#AC_MSG_NOTICE(Compiler flags: $CLIENT_CFLAGS)
#AC_MSG_NOTICE(Link against:   $LIBS")

AC_CONFIG_HEADERS([config.h:config.h.in])
AC_OUTPUT(Makefile)
