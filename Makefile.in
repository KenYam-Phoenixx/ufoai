#######################################################################################################
# Configure guessed variables ...
#######################################################################################################

CC=@CC@
CPP=@CXX@
CFLAGS=@CFLAGS@
CPPFLAGS=@CPPFLAGS@
# MKDIR_P=@MKDIR_P@
WINDRES=@WINDRES@
LIBS=@LIBS@
LDFLAGS=@LDFLAGS@
PACKAGE_VERSION=@PACKAGE_VERSION@
PACKAGE_NAME=@PACKAGE_NAME@

TARGET_OS=@TARGET_OS@
TARGET_CPU=@TARGET_CPU@
EXE_EXT=@EXE_EXT@

SDL_CFLAGS=@SDL_CFLAGS@
SDL_LIBS=@SDL_LIBS@

OPENAL_CFLAGS=@OPENAL_CFLAGS@
OPENAL_LIBS=@OPENAL_LIBS@

CLIENT_LIBS=@CLIENT_LIBS@
SERVER_LIBS=@SERVER_LIBS@
GAME_LIBS=@GAME_LIBS@
TOOLS_LIBS=@TOOLS_LIBS@
RADIANT_LIBS=@RADIANT_LIBS@

RADIANT_CFLAGS=@RADIANT_CFLAGS@

MSYS=@MSYS@
PROFILING=@PROFILING@
HARD_LINKED_GAME=@HARD_LINKED_GAME@
PARANOID=@PARANOID@
USE_SIGNALS=@USE_SIGNALS@
BUILD_CLIENT=@BUILD_CLIENT@
BUILD_TESTS=@BUILD_TESTS@
BUILD_DEDICATED=@BUILD_DEDICATED@
BUILD_UFO2MAP=@BUILD_UFO2MAP@
BUILD_UFORADIANT=@BUILD_UFORADIANT@
BUILD_DEBUG=@BUILD_DEBUG@

# assign parameters from configure
DATAROOTDIR=@datarootdir@
BINDIR=@BINDIR@
LOCALEDIR=@LOCALEDIR@
PKGDATADIR=@PKGDATADIR@
PKGLIBDIR=@PKGLIBDIR@
INSTALL=./install-sh

#######################################################################################################

ifeq ($(wildcard .svn),.svn)
	SVN_REV:=$(shell LANG=C svnversion .)
	ifeq ($(SVN_REV),)
		SVN_REV:=$(shell LANG=C svn info | awk '$$1 == "Revision:" {print $$2; exit 0}')
	endif
	ifneq ($(SVN_REV),)
		CFLAGS+=-DUFO_REVISION=\"$(SVN_REV)\"
	endif
endif

#######################################################################################################

include build/platform_specific.mk
include build/defs.mk

#######################################################################################################

# define all the modules that need to be compiled
MODULES = radiant game client server tools sound masterserver tests

all: all2

# include the make files for each module
-include $(patsubst %, build/%.mk, $(MODULES))

ALL_DEPS = $(patsubst %.o, %.d, $(ALL_OBJS) $(ALL_RADIANT_OBJS))

all2: Makefile $(BUILDDIR)/.dirs $(TARGETS) echo_info

# check that the makefile is up to date
Makefile: Makefile.in
	@echo "ERROR: You need to re-run configure"
	@exit 1

# Say how to build the build directories
$(BUILDDIR)/.dirs:
	@mkdir -p $(foreach i, $(ALL_OBJS), $(dir $i))
	@mkdir -p $(foreach i, $(ALL_RADIANT_OBJS), $(dir $i))
	@touch $@

clean:
	@echo "Making clean"
	@rm -f $(ALL_OBJS) $(ALL_DEPS) $(BUILDDIR)/.dirs $(TARGETS)

echo_info:
	@echo "CFLAGS"
	@echo "-----------------------"
	@echo $(CFLAGS)
	@echo $(CLIENT_CFLAGS) $(SDL_CFLAGS)
	@echo $(RADIANT_CFLAGS)
	@echo
	@echo "LDFLAGS"
	@echo "-----------------------"
	@echo $(LDFLAGS)
	@echo $(CLIENT_LIBS) $(SDL_LIBS)
	@echo $(RADIANT_LIBS)
	@echo
	@echo "Gettext"
	@echo "-----------------------"
	@echo "Type '$(MAKE) lang' to compile the gettext translation files."
	@echo
	@echo "Models"
	@echo "-----------------------"
	@echo "Type '$(MAKE) models' to generate mdx files for faster model loading"
	@echo
	@echo "Maps"
	@echo "-----------------------"
	@echo "Execute '$(MAKE) maps-sync' to download the maps"
	@echo "This is e.g. needed if you want to play multiplayer games and the"
	@echo "checksums of your maps have to match with the ones from your"
	@echo "opponents - or just type '$(MAKE) maps' to compile the maps"
	@echo
	@echo "PAK files"
	@echo "-----------------------"
	@echo "Type '$(MAKE) pk3' to assemble the pk3 files"
	@echo
	@echo "Installation"
	@echo "-----------------------"
	@echo "Version $(PACKAGE_VERSION)"
	@echo "Install data into $(PKGDATADIR)"
	@echo "Install libs into $(PKGLIBDIR)"
	@echo "Install translations into $(LOCALEDIR)"
	@echo "Install binaries into $(BINDIR)"
	@echo
	@echo "Built for $(BUILDDIR)"
ifeq ($(BUILD_UFORADIANT),1)
	@echo "UFORadiant"
	@echo "-----------------------"
	@echo "Type '$(MAKE) uforadiant' to compile radiant mapeditor"
	@echo
endif

include build/lang.mk
include build/install.mk
include build/various.mk
include build/maps.mk
include build/models.mk
include build/splint.mk

#
# Target to install the whole game - executables and game data.
#
# Use configure's parameters --bindir= and --datadir= to specify destination
# directories, "bindir" for run scripts and "datadir" for the whole game.
# "ufoai/" will be appended to the end of datadir path.
#
install_complete: install_data install_exec

#
# Target to install only the executables, language files and the run script.
# Other game data has to be installed from the ufoai-VERSION-data.tar archive.
#
# For destination directories see install_complete above.
#
install: install_exec install_data
	@echo
	@echo Copied pk3 files into $(PKGDATADIR) and binaries into $(BINDIR)
	@echo
	@echo

# recursively call make.
# If we instead include data.mk and use that rule for pk3, then
# we will automatically call the equivalent of make maps before
# make pk3, since 0maps.pk3 depends on the bsp files, which
# have the rules to build them from maps.mk. This is not what
# you want to have happen if you have downloaded a distribution
# ready 0maps.pk3 file! So long as 0maps.pk3 is newer than the
# BSP files this will work correctly even if there are newer
# map files kicking around.
pk3 clean-pk3:
	$(MAKE) -f build/data.mk $@

#
# Target to install only the game data.
#
install_data: pk3
	$(INSTALL) -d $(DESTDIR)$(PKGDATADIR)/base
# Copy them to datadir
	$(INSTALL) -m 644 base/*.pk3 $(DESTDIR)$(PKGDATADIR)/base

#
# Target to install the game executables and language files. It also creates a
# shell script to run the game and dedicated server from directory other than
# datadir.
#
install_exec: $(TARGETS)
	@$(MAKE) lang
	$(INSTALL) -d $(DESTDIR)$(PKGDATADIR)/base
# Copy each compiled file to datadir (with path)
	for file in $(TARGETS); do $(INSTALL) -m 755 $$file $(DESTDIR)$(PKGDATADIR)/$$file; done
# Copy all language files
	for dir in base/i18n/*; do \
		$(INSTALL) -d $(DESTDIR)$(PKGDATADIR)/$$dir/LC_MESSAGES && \
		$(INSTALL) -m 644 $$dir/LC_MESSAGES/ufoai.mo $(DESTDIR)$(PKGDATADIR)/$$dir/LC_MESSAGES/ufoai.mo; \
	done
# Create and install run scripts
	@echo "#!/bin/sh" > ufo.sh
	@echo "cd $(PKGDATADIR); ./ufo \$$*; exit \$$?" >> ufo.sh
	$(INSTALL) -d $(DESTDIR)$(BINDIR)
	$(INSTALL) -m 755 ufo.sh $(DESTDIR)$(BINDIR)/ufo
	@echo "#!/bin/sh" > ufoded.sh
	@echo "cd $(PKGDATADIR); ./ufoded \$$*; exit \$$?" >> ufoded.sh
	$(INSTALL) -m 755 ufoded.sh $(DESTDIR)$(BINDIR)/ufoded

#######################################################################

-include $(ALL_DEPS)

ifeq ($(BUILD_UFORADIANT),1)
clean-uforadiant:
	@echo "Making clean uforadiant"
	@rm -f $(ALL_RADIANT_OBJS) $(RADIANT_DEPS)
endif

clean-tests:
	@echo "Making clean tests"
	@rm -f $(TESTS_TARGET) $(TESTS_OBJS)

.PHONY: all all2 clean echo_info $(BUILDDIR)/.dirs

