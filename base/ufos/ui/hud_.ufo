// ==================
// HUD INTERFACE
// ==================

component panel cmpFiremodeEntry {
	{
		pos		"0 0"
		size	"214 63"
		align	LAYOUTALIGN_TOP
	}

	image bg
	{
		src	"hud/firemode"
		pos		"0 0"
		texl	"0 0"
		texh	"214  63"
		size	"214  63"
		onMouseEnter { *node:this@image = "hud/firemode_hover" }
		onMouseLeave { *node:this@image = "hud/firemode" }
		onClick	{
			cmd "hud_executeaction <node:parent.actionid@string>"
		}
	}

	image cb
	{
		src	"hud/checkbox"
		tooltip	"_Check to use this firemode for reaction fire"
		pos		"0 32"
		texl	"0 0"
		texh	"31 31"
		onClick	{
			cmd "hud_selectreactionfiremode <node:parent.hand@string> <node:parent.id@string>"
		}
	}

	/** store the actionid */
	string actionid {
		size	"0 0"
		invis	true
	}

	/** store the hand */
	string hand {
		size	"0 0"
		invis	true
	}

	/** store the index of the firemode */
	string index {
		size	"0 0"
		invis	true
	}

	string name
	{
		pos "27 4"
		size "183 25"
		textalign ALIGN_CL
		ghost true
	}
	string tu
	{
		pos "27 32"
		size "69 28"
		textalign ALIGN_CC
		ghost true
		font		"f_verysmall"
	}
	string shot
	{
		pos "99 32"
		size "111 28"
		textalign ALIGN_CC
		ghost true
		font		"f_verysmall"
	}

	/**
	 * @param<1> id
	 * @param<2> hand (char) (l or r for left or right)
	 * @param<3> firedef index (int)
	 * @param<4> firedef reaction fire (int) (1= true, 0= false)
	 * @param<5> status (1 available, 0 need more TU)
	 * @param<6> name (string)
	 * @param<7> TUs (string)
	 * @param<8> shots (string)
	 * @param<9> tooltip
	 */
	func init {
		*node:parent.actionid@string = "<1>"
		*node:parent.hand@string = "<2>"
		*node:parent.index@string = "<3>"

		*node:parent.name@string = "<6>"
		*node:parent.tu@string = "_TU: <7>"
		*node:parent.shot@string = "_Shots: <8>"
		*node:parent.tu@tooltip = "<9>"

		if ( <5> eq "1" ) {
			*node:parent.bg@texl = "0 0"
			*node:parent.bg@texh = "214 63"
		} else {
			*node:parent.bg@texl = "0 64"
			*node:parent.bg@texh = "214 128"
		}

		if ( <4> eq "0" ) {
			*node:parent.cb@invis = true
		}
	}

	/**
	 * @param<1> activate (1=activate, 0=deactivate)
	 */
	func init_reaction {
		if ( <1> eq "1" ) {
			*node:parent.cb@texl = "0 32"
			*node:parent.cb@texh = "31 63"
			*node:parent.cb@invis = false
		} else {
			*node:parent.cb@texl = "0 0"
			*node:parent.cb@texh = "31 31"
			*node:parent.cb@invis = false
		}
	}
}

window levelbuttons {
	confunc updateLevelStatus { }
}

/**
 * @brief Define interface shared by all huds.
 * @note called "ahud" to be loaded before another huds
 * @todo rename the interface confuncs
 */
window hud extends levelbuttons {

	confunc hudselect { }
	confunc hudenable { }
	confunc huddisable { cmd "updateactorvalues <1> \"\" \"0\" \"1\" \"0\" \"1\" \"0\" \"1\" \"0\" \"\";" }

	confunc deselect_primaryleft { }
	confunc deselect_primaryright { }
	confunc deselect_reloadleft { }
	confunc deselect_reloadright { }
	confunc deselect_stand { }
	confunc deselect_crouch { }
	confunc deselect_reaction { }
	confunc deselect_headgear { }

	confunc disable_primaryleft { }
	confunc disable_primaryright { }
	confunc disable_reloadleft { }
	confunc disable_reloadright { }
	confunc disable_stand { }
	confunc disable_crouch { }
	confunc disable_reaction { }
	confunc disable_headgear { }

	/* Prevent time for crouch */
	confunc crouch_checkbox_disable { }
	confunc crouch_checkbox_clear { }
	confunc crouch_checkbox_check { }

	confunc reserve_shot_clear { }

	confunc reserve_shot_check { }

	confunc reserve_shot_disable { }

	confunc startreactionmany { }
	confunc startreactionmany_impos { }
	confunc startreactiononce { }
	confunc startreactiononce_impos { }

	confunc startround { }
	confunc endround { }

	confunc openradar { cmd "ui_push radarwindow;" }

	confunc unhide_chatscreen { *node:root.chatscreen@invis = false }

	/**
	 * @param <1> the id of the soldier (starting at 0)
	 * @param <2> the model path of the head model
	 * @param <3> the hp of the actor
	 * @param <4> the max hp of the actor
	 * @param <5> the tus of the actor
	 * @param <6> the max tus of the actor
	 * @param <7> the morale of the actor
	 * @param <8> the max morale of the actor
	 * @param <9> the stun value of the actor
	 * @param <10> the tooltip
	 */
	confunc updateactorvalues {
		*cvar:mn_head<1> = "<2>"
		*cvar:mn_hp<1> = "<3>"
		*cvar:mn_hpmax<1> = "<4>"
		*cvar:mn_tu<1> = "<5>"
		*cvar:mn_tumax<1> = "<6>"
		*cvar:mn_morale<1> = "<7>"
		*cvar:mn_moralemax<1> = "<8>"
		*cvar:mn_stun<1> = "<9>"
		*cvar:mn_soldier<1>_tt = "<10>"
	}

	confunc clean_firemode_entries {
		call *node:root.firemodes.dock@removeAllChild
	}

	/**
	 * @param<1> hand [l|r]
	 * @param<2> firedef id (int)
	 * @param<3> name (string)
	 * @param<4> TUs (string)
	 * @param<5> shots (int)
	 * @param<6> reaction [0|1]
	 * @param<7> status [0|1]
	 * @param<6> firedef selected [0|1]
	 */
	confunc add_firemode_entry
	{
		call *node:root.firemodes.dock@createChild ( "<1><2>" , "cmpFiremodeEntry" )
		*node:root.firemodes.dock.<1><2>.hand@string = <1>
		*node:root.firemodes.dock.<1><2>.id@string = <2>
		*node:root.firemodes.dock.<1><2>.name@string = <3>
		*node:root.firemodes.dock.<1><2>.tu@string = <4>
		*node:root.firemodes.dock.<1><2>.shot@string = <5>
	}

	panel firemodes {
		{
			layout	LAYOUT_PACK
			size	"1024 768"
		}

		panel dock {
			{
				pos				"0 0"
				size			"300 768"
				layout			LAYOUT_PACK
				padding			0
				layoutmargin	2
			}

			panel bottomMargin {
				align		LAYOUTALIGN_TOP
				size		"280 30"
			}
		}
	}
}

window radarwindow {
	{
		pos			"256 100"
		size		"547 580"
		dragbutton	true
		closebutton	true
		image		"ui/popup_alpha_tile"
		string		"_Radar"
	}

	confunc closeradar {
		cmd "ui_close radarwindow"
	}

	radar hudradar
	{
		pos	"25 55"
		size "500 500"
	}
}

// ==================
//  FIREMODES (seperate lists for each weaponhand)
// ==================
/*
	fm ... firemode
	left/right/l/r  ... The hand/side of the firemode list
	name ... The name of the firemode.
	tu ... timeunits
	shots ... The number of shots one firemode will use.
	tt ... tooltip
	cb ... checkboxes
	a ... active
	ina ... inactive
	vis ... visible
	inv ... invisible
*/

window firemode_left {
	{
		pos			"622 0"
		size		"255 700"
		dropdown	true
		ghost		true
	}

	zone anchor
	{
		pos		"23 700"
		size	"192 0"
	}

	panel elements {
		pos		"0 0"
		size	"255 700"
	}

	func onWindowOpened {
		cmd "hud_listfiremodes firemode_listener l;"
	}
}

window firemode_right {
	{
		pos			"164 0"
		size		"255 700"
		dropdown	true
		ghost		true
	}

	zone anchor
	{
		pos		"23 700"
		size	"192 0"
	}

	panel elements {
		pos		"0 0"
		size	"255 700"
	}

	func onWindowOpened {
		cmd "hud_listfiremodes firemode_listener r;"
	}
}

window hud_general {

	confunc hide_firemodes {
		call *node:firemode_left.elements@removeAllChild
		call *node:firemode_right.elements@removeAllChild
	}

	confunc firemode_listener {
		if (<1> eq "begin") {
			call *node:parent.hide_firemodes
			*cvar:i = 1
		} elif (<1> eq "firemode") {
			// @todo use autolayout instead of @top
			*cvar:side = <3>

			if (<3> eq "l") {
				call *node:firemode_left.elements@createChild("<2>", "cmpFiremodeEntry")
				*node:firemode_left.elements.<2>@top = (*node:firemode_left.elements@height - (63 * *cvar:i))
				call *node:firemode_left.elements.<2>.init(<2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>)
			} else {
				call *node:firemode_right.elements@createChild("<2>", "cmpFiremodeEntry")
				*node:firemode_right.elements.<2>@top = (*node:firemode_right.elements@height - (63 * *cvar:i))
				call *node:firemode_right.elements.<2>.init(<2>, <3>, <4>, <5>, <6>, <7>, <8>, <9>, <10>)
			}
			*cvar:i = (*cvar:i + 1)

		} elif (<1> eq "reaction") {
			// node: "firemode" command for action <2> already called
			if (<3> eq "l") {
				call *node:firemode_left.elements.<2>.init_reaction(<3>)
			} else {
				call *node:firemode_right.elements.<2>.init_reaction(<3>)
			}
		} elif (<1> eq "reload") {
		} elif (<1> eq "end") {
			delete *cvar:i
			delete *cvar:side
		} else {
			cmd "echo firemode_listener: unknown \"<1>\" command"
		}
	}
}
