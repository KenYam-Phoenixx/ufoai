/**
 * @brief Unittest for actions
 * Move it into the ui ufo script directory (/base/ufos/ui/), run the game, and run the command "ui_push test_cvar"
 * Every thing must be green and it must not print any text or warning into the console.
 */

window test_angelscript
{
	{
		pos "100 100"
		size "340 400"
		dragbutton	true
		closebutton	true
		string		"_Unittest cvar"
		bgcolor		"0 0 0 1"
	}

	string test1 {	pos		"200 60" string	"t1" }
	string test2 {	pos		"200 70" string	"t2" }
	string test3 {	pos		"200 80" string	"t3" }
	string test4 {	pos		"200 80" string	"t4" }

	string test5 {
		pos		"200 80"
		string	"t3"
	}

	string test6 {
		pos		"200 80"
		string	"t3"
	}

	string test7 {
		pos		"200 80"
		string	"t3"
	}

	string test8 {
		pos		"200 80"
		string	"t3"
	}

	string test9 {
		pos		"200 80"
		string	"t3"
	}

	string test10 { pos "200 60" string "t10" }
	string test11 { pos "200 60" string "t11" }
	string test12 { pos "200 70" string "t12" }
	string test13 { pos "200 80" string "t13" }
	string test14 { pos "200 80" string "t14" }

	string test15 { pos "200 80" string "t15" }
	string test16 { pos "200 80" string "t16" }
	string test17 { pos "200 80" string "t17" }
	string test18 { pos "200 80" string "t18" }

	button buttonTest
	{
		{
			pos			"10 10"
			size		"50 50"
			color		".2187 .73 .23 1"
		}

		angelscript {

			void onClick() {
				cvar@ b = getCvar("test_1");
				int a = 0;
				a++;
				b.integer = a;
				if (b.integer == 1) {
					cvar@ c = getCvar("test_2");
					c.integer = 2;
				}
				if (b.integer == 10) {
					// ...
				} else {
					cvar@ c = getCvar("test_3");
					c.string = "foobar";
				}
			}

			void onRClick() {
				uinode@ n = getNode("test_angelscript.buttonTest");
				n.color.red = 0.5;
				n.left = 23;
				n.ghost = false;

				color red;
				red.red = 1;
				red.green = 0;
				red.blue = 0;
				red.alpha = 1;
				n.bgcolor = red;

				color blue = "0 1 0";

				n.bordercolor = blue;
			}

			void onMClick() {
				color red = "1 0 0";
				color green = "0 1 0";
				uinode@ n = getNode("test_angelscript.buttonTest");

				uinode@ test_1 = getNode("test_angelscript.test4");
				uinode@ test_2 = getNode("test_angelscript.test5");
				bool b = (test_1 == test_2);

				uinode@ test4 = getNode("test_angelscript.test4");
				uinode@ window = n.window;
				if (window.type == "window") test4.color = green;
				else test4.color = red;

				uinode@ test5 = getNode("test_angelscript.test5");
				if (window.name == "test_angelscript") test5.color = green;
				else test5.color = red;

				uinode@ test6 = getNode("test_angelscript.test6");
				uinode@ nothing = window.parent;
				if (nothing is null) test6.color = green;
				else test6.color = red;

				uinode@ test7 = getNode("test_angelscript.test7");
				uinode@ child = n.firstChild;
				if (child is null) test7.color = green;
				else test7.color = red;

				uinode@ test8 = getNode("test_angelscript.test8");
				uinode@ parent = n.parent;
				if (parent == window) test8.color = green;
				else test8.color = red;

				uinode@ test9 = getNode("test_angelscript.test9");
				uinode@ next = n.next;
				if (next !is null) test9.color = green;
				else test9.color = red;
			}
		}
	}

	button buttonTest2
	{
		{
			pos "0 0"
			size "40 40"
		}

		angelscript {

			// A global thisNode is shared
			// it point to the current node
			// this way do not allow concurrent execution

			void onMClick() {
				color red = "1 0 0";
				color green = "0 1 0";

				uinode@ test10 = getNode("test_angelscript.test10");
				if (thisNode !is null) test10.color = green;
				else test10.color = red;

				uinode@ test11 = getNode("test_angelscript.test11");
				if (thisNode.name == "buttonTest2") test11.color = green;
				else test11.color = red;

				uinode@ test12 = getNode("test_angelscript.test12");
				if (thisNode.window.name == "test_angelscript") test12.color = green;
				else test12.color = red;

				// edit this and see the result
				thisNode.left = 10;
				uinode@ sameNode = getNode("test_angelscript.buttonTest2");
				uinode@ test13 = getNode("test_angelscript.test13");
				if (sameNode.left == 10) test13.color = green;
				else test13.color = red;

				// edit same and see this
				uinode@ sameNode2 = getNode("test_angelscript.buttonTest2");
				sameNode2.top = 11;
				uinode@ test14 = getNode("test_angelscript.test14");
				if (thisNode.top == 11) test14.color = green;
				else test13.color = red;
			}

		}
	}

	// THIS IS NOT ANGELSCRIPT
	func testNodeNavigation {
		call *node:root.buttonTest@onMClick
	}

	// THIS IS NOT ANGELSCRIPT
	func testNodeProperties {
		call *node:root.buttonTest@onRClick
		cmd "echo <node:root.buttonTest@color> == 0.5 _ _ _"
		cmd "echo <node:root.buttonTest@bgcolor> == red"
		cmd "echo <node:root.buttonTest@bordercolor> == 0 1 0"
	}

	// THIS IS NOT ANGELSCRIPT
	func testCvar {
		*cvar:test_1 = "aaaa"
		call *node:root.buttonTest@onClick

		if ( *cvar:test_1 == 1 ) { *node:root.test1@color = "0 1 0 1" }
		else { *node:root.test1@color = "1 0 0 1" }
		if ( *cvar:test_2 == 2 ) { *node:root.test2@color = "0 1 0 1" }
		else { *node:root.test2@color = "1 0 0 1" }
		if ( *cvar:test_3 eq "foobar" ) { *node:root.test3@color = "0 1 0 1" }
		else { *node:root.test3@color = "1 0 0 1" }

		delete *cvar:test_1
		delete *cvar:test_2
		delete *cvar:test_3
	}

	// THIS IS NOT ANGELSCRIPT
	func testNodeThis {
		call *node:root.buttonTest2@onMClick
	}

	func testFunc angelscript {
		color red = "1 0 0";
		color green = "0 1 0";

		// ok it work
		uinode@ test15 = getNode("test_angelscript.test15");
		test15.color = green;

		// thisnode is the parent node of the func
		uinode@ test16 = getNode("test_angelscript.test16");
		if (thisNode.name == "test_angelscript") test16.color = green;
		else test16.color = red;
	}

	confunc testConFunc angelscript {
		color red = "1 0 0";
		color green = "0 1 0";

		// ok it work
		uinode@ test17 = getNode("test_angelscript.test17");
		test17.color = green;

		// thisnode is the parent node of the func
		uinode@ test18 = getNode("test_angelscript.test18");
		if (thisNode.name == "test_angelscript") test18.color = green;
		else test18.color = red;
	}

	string testNodeMethod0 { pos "200 80" string "method0" }
	string testNodeMethod1 { pos "200 80" string "method1" }
	string testNodeMethod2 { pos "200 80" string "method2" }
	string testNodeMethod3 { pos "200 80" string "method2" }

	checkbox checkTest {
		{
			pos "0 0"
			size "10 10"
			current	*cvar:test_check
		}
		angelscript {
			void onClick() {
				color red = "1 0 0";
				color green = "0 1 0";

				// ok it compile
				uinode@ test0 = getNode("test_angelscript.testNodeMethod0");
				test0.color = green;

				cvar@ value = getCvar("test_check");

				thisNode.toggle();
				uinode@ test1 = getNode("test_angelscript.testNodeMethod1");
				if (value.integer == 0) test1.color = green;
				else test1.color = red;

				thisNode.toggle();
				uinode@ test2 = getNode("test_angelscript.testNodeMethod2");
				if (value.integer == 1) test2.color = green;
				else test2.color = red;

				thisNode.createChild("foo1", "checkbox");
				uinode@ foo = getNode(thisNode.path + ".foo1");
				uinode@ test3 = getNode("test_angelscript.testNodeMethod3");
				if (foo !is null) test3.color = green;
				else test3.color = red;

				thisNode.removeAllChild();
			}
		}
	}

	// THIS IS NOT ANGELSCRIPT
	func testNodeMethod {
		*cvar:test_check = 1
		call *node:root.checkTest@onClick
	}

	string testAssign1 { pos "200 80" string "set1" }
	string testAssign2 { pos "200 80" string "set2" }
	string testAssign3 { pos "200 80" string "set3" }

	/** there is problem to assign that, i dont know why */
	func testAssignCompile1 angelscript {
		color green = "0 1 0";
		uinode@ foo;
		@foo = thisNode;
		@foo = getNode(thisNode.path);
		uinode@ foo2 = getNode(thisNode.path);
		@foo = foo2;
		// ok it compile... or not
		uinode@ test = getNode("test_angelscript.testAssign1");
		test.color = green;
	}
	/** the same... with simple code */
	func testAssignCompile2 angelscript {
		color green = "0 1 0";
		uinode@ foo;
		@foo = thisNode;
		// ok it compile... or not
		uinode@ test = getNode("test_angelscript.testAssign2");
		test.color = green;
	}
	/** assignation of node property without use of temporary var for node
	 */
	func testAssignCompile3 angelscript {
		// ok it compile... or not
		color green = "0 1 0";
		getNode("test_angelscript.testAssign3").color = green;
	}

	string testCase0 { pos "200 80" string "set1" }
	string testCase1 { pos "200 80" string "set1" }
	string testCase2 { pos "200 80" string "set1" }
	string testCase3 { pos "200 80" string "set1" }
	string testCase4 { pos "200 80" string "set1" }

	func testCase angelscript {
		color red = "1 0 0";
		color green = "0 1 0";

		// ok it compile
		uinode@ test0 = getNode("test_angelscript.testCase0");
		test0.color = green;

		// implicit
		uinode@ case1 = thisNode;
		uinode@ test1 = getNode("test_angelscript.testCase1");
		if (case1 !is null) test1.color = green;
		else test1.color = red;

		// explicit to super
		uinode@ case2 = cast<uinode>(thisNode);
		uinode@ test2 = getNode("test_angelscript.testCase2");
		if (case2 !is null) test2.color = green;
		else test2.color = red;

		// explicit to inherited
		uiwindow@ case3 = cast<uiwindow>(case2);
		uinode@ test3 = getNode("test_angelscript.testCase3");
		if (case3 !is null) test3.color = green;
		else test3.color = red;

		// not possible
		uicheckbox@ case4 = cast<uicheckbox>(case2);
		uinode@ test4 = getNode("test_angelscript.testCase4");
		if (case4 is null) test4.color = green;
		else test4.color = red;
	}

	string testEventExecute0 { pos "200 80" string "eventexecute0" }
	string testEventExecute1 { pos "200 80" string "eventexecute1" }
	string testEventExecute2 { pos "200 80" string "eventexecute2" }
	string testEventExecute3 { pos "200 80" string "eventexecute3" }
	string testEventExecute4 { pos "200 80" string "eventexecute4" }

	button buttonTest3 {
		{
			pos "0 0"
			size "10 10"
		}

		// THIS IS NOT ANGELSCRIPT
		func onMClick {
			*node:root.testEventExecute1@color = "0 1 0"
		}

		angelscript {
			void onClick() {
				color green = "0 1 0";
				uinode@ n = getNode("test_angelscript.testEventExecute2");
				n.color = green;
			}
			void onRClick() {
				color green = "0 1 0";
				uinode@ n = getNode("test_angelscript.testEventExecute3");
				n.color = green;
			}
		}

		// THIS IS NOT ANGELSCRIPT
		func a_function {
			*node:root.testEventExecute4@color = "0 1 0"
		}

	}

	func testEventExecute angelscript {
		// ok, it compile
		color green = "0 1 0";
		uinode@ n = getNode("test_angelscript.testEventExecute0");
		n.color = green;

		uinode@ clickMe = getNode("test_angelscript.buttonTest3");
		clickMe.onMClick.execute();
		clickMe.onClick.execute();
		clickMe.onRClick.execute();

		uinode@ a_function = getNode("test_angelscript.buttonTest3.a_function");
		a_function.execute();
	}

	string testListener1 { pos "200 80" string "listener1" }
	string testListener2 { pos "200 80" string "listener2" color "0 1 0" }
	string testListener3 { pos "200 80" string "listener3" }
	string testListener1_func { pos "200 80" string "listener1_f" }
	string testListener2_func { pos "200 80" string "listener2_f" color "0 1 0" }
	string testListener3_func { pos "200 80" string "listener3_f" }

	button buttonTest_listener {
		{
			pos "0 0"
			size "10 10"
		}

		angelscript {
			void listen_bad1() {
				color red = "1 0 0";
				uinode@ n = getNode("test_angelscript.testListener1");
				n.color = red;
			}
			void listen1() {
				color green = "0 1 0";
				uinode@ n = getNode("test_angelscript.testListener1");
				n.color = green;
			}
			void listen_bad2() {
				color red = "1 0 0";
				uinode@ n = getNode("test_angelscript.testListener2");
				n.color = red;
			}
			void listen3() {
				color green = "0 1 0";
				uinode@ n = getNode("test_angelscript.testListener3");
				n.color = green;
			}

			void onRClick() {
				thisNode.onClick.set(@listen_bad1);
				thisNode.onClick.set(@listen1);
				thisNode.onClick.add(@listen_bad2);
				thisNode.onClick.add(@listen3);
				thisNode.onClick.remove(@listen_bad2);
				thisNode.onClick.remove(@listen3);
				thisNode.onClick.add(@listen3);
				thisNode.onClick.execute();
			}
		}
	}

	button buttonTest_func_listener {
		{
			pos "0 0"
			size "10 10"
		}

		func listen_bad1_func angelscript {
			color red = "1 0 0";
			uinode@ n = getNode("test_angelscript.testListener1_func");
			n.color = red;
		}
		func listen1_func angelscript {
			color green = "0 1 0";
			uinode@ n = getNode("test_angelscript.testListener1_func");
			n.color = green;
		}
		func listen_bad2_func angelscript {
			color red = "1 0 0";
			uinode@ n = getNode("test_angelscript.testListener2_func");
			n.color = red;
		}
		func listen3_func angelscript {
			color green = "0 1 0";
			uinode@ n = getNode("test_angelscript.testListener3_func");
			n.color = green;
		}

		angelscript {
			void onRClick() {
				uinode@ listen_bad1 = getNode("test_angelscript.buttonTest_func_listener.listen_bad1_func");
				uinode@ listen_bad2 = getNode("test_angelscript.buttonTest_func_listener.listen_bad2_func");
				uinode@ listen1 = getNode("test_angelscript.buttonTest_func_listener.listen1_func");
				uinode@ listen3 = getNode("test_angelscript.buttonTest_func_listener.listen3_func");
				thisNode.onClick.set(listen_bad1);
				thisNode.onClick.set(listen1);
				thisNode.onClick.add(listen_bad2);
				thisNode.onClick.add(listen3);
				thisNode.onClick.remove(listen_bad2);
				thisNode.onClick.remove(listen3);
				thisNode.onClick.add(listen3);
				thisNode.onClick.execute();
			}
		}
	}

	func testListener angelscript {
		uinode@ n = getNode("test_angelscript.buttonTest_listener");
		n.onRClick.execute();
		uinode@ n2 = getNode("test_angelscript.buttonTest_func_listener");
		n2.onRClick.execute();
	}

	// THIS IS NOT ANGELSCRIPT
	func onInit {
		call *node:root.testCvar
		call *node:root.testNodeProperties
		call *node:root.testNodeNavigation
		call *node:root.testNodeThis
		call *node:root.testFunc
		call *node:root.testConFunc
		call *node:root.testNodeMethod
		call *node:root.testAssignCompile1
		call *node:root.testAssignCompile2
		call *node:root.testAssignCompile3
		call *node:root.testCase
		call *node:root.testEventExecute
		call *node:root.testListener
	}

}
